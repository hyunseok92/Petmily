/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-01 07:57:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.Member;

public final class passwordUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    ");
 Member member = (Member)request.getAttribute("member");  
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>petmily</title>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("	src=\"/petmily/resources/js/common/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("@font-face {\r\n");
      out.write("	font-family: 'Surround';\r\n");
      out.write("	src: url('/petmily/resources/font/surround.woff2') format('woff2');\r\n");
      out.write("	font-weight: normal;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("@font-face{\r\n");
      out.write("	font-family: 'forgedm';\r\n");
      out.write("	src: url('/petmily/resources/font/forged-Medium.ttf') format('truetype');\r\n");
      out.write("	font-weight: normal;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("@font-face{\r\n");
      out.write("	font-family: 'forgedl';\r\n");
      out.write("	src: url('/petmily/resources/font/forged-Light.ttf') format('truetype');\r\n");
      out.write("	font-weight: normal;\r\n");
      out.write("	font-style: normal;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	font-family: 'Surround', sans-serif;\r\n");
      out.write("	padding: 20px 50px;\r\n");
      out.write("	font-size: 25px;\r\n");
      out.write("	font-weight: 900;\r\n");
      out.write("	color: hsl(30.5, 77.6%, 29.8%);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body h1 a {\r\n");
      out.write("	font-family: 'Surround', sans-serif;\r\n");
      out.write("	padding: 20px 50px;\r\n");
      out.write("	font-size: 35px;\r\n");
      out.write("	font-weight: 900;\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: hsl(30.46deg 58.9% 45.68%);\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("	width: 340px;\r\n");
      out.write("	height: auto;\r\n");
      out.write("	border: 3px solid hsl(30.5, 77.6%, 29.8%);\r\n");
      out.write("	border-radius: 25px; display : flex;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	background-color: #FFE4B5;\r\n");
      out.write("	display: flex;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("[type=text] {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("input[type=text]:focus {\r\n");
      out.write("	outline: none;\r\n");
      out.write("}\r\n");
      out.write("[name=dpinfo] {\r\n");
      out.write("	font-family: 'forgedl', sans-serif;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("}\r\n");
      out.write("td input {\r\n");
      out.write("	font-family: 'forgedm', sans-serif;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	color: hsl(30.5, 77.6%, 29.8%);\r\n");
      out.write("	width: 250px;\r\n");
      out.write("	height: 30px;\r\n");
      out.write("	border-radius: 7px;\r\n");
      out.write("	background-color: #FFE4B5;\r\n");
      out.write("	border:none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#mpwd, #mpwd2 {\r\n");
      out.write("	border: 2px solid hsl(30.5, 77.6%, 29.8%);\r\n");
      out.write("	background-color: beige;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#checkenroll {\r\n");
      out.write("	font-family: 'forgedl', sans-serif;\r\n");
      out.write("	font-size: 10pt;\r\n");
      out.write("	width: 300px;\r\n");
      out.write("	height: auto;\r\n");
      out.write("	border: none;\r\n");
      out.write("	margin: 0px;\r\n");
      out.write("	padding: 0px;\r\n");
      out.write("	white-space: pre-line;\r\n");
      out.write("	overflow: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#myinformation {\r\n");
      out.write("	width: 300px;\r\n");
      out.write("	font-family: 'Surround', sans-serif;\r\n");
      out.write("	font-size: 18pt;\r\n");
      out.write("	color: hsl(30.46deg 58.9% 45.68%);\r\n");
      out.write("	background-color: #FFE4B5;\r\n");
      out.write("	border: none;\r\n");
      out.write("}\r\n");
      out.write("#chpwd {\r\n");
      out.write("	border: 2px solid hsl(30.5, 77.6%, 29.8%);\r\n");
      out.write("	background-color: beige;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	var mpwd = document.getElementById('mpwd');\r\n");
      out.write("	var mpwd2 = document.getElementById('mpwd2');\r\n");
      out.write("	var cpwd = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$])[a-zA-Z\\d@!#$]{6,12}[a-zA-Z\\d@!#$]$/;\r\n");
      out.write("	var notice = document.getElementById('checkenroll');\r\n");
      out.write("	var submit = document.getElementById('chpwd');\r\n");
      out.write("	notice.hidden = true;\r\n");
      out.write("	submit.hidden = true;\r\n");
      out.write("	mpwd.addEventListener('keyup',function() {\r\n");
      out.write("		if (!cpwd.test(mpwd.value)) {\r\n");
      out.write("			submit.hidden = true;\r\n");
      out.write("			notice.hidden = false;\r\n");
      out.write("			notice.textContent = '패스워드는 영어 대,소문자와 숫자를 포함하고,!@#$기호중 하나를 포함시켜 6~12글자로 사용해주세요.';\r\n");
      out.write("			notice.style.color = '#ae1a1e';\r\n");
      out.write("		} else {\r\n");
      out.write("			notice.textContent = '사용가능한 패스워드입니다';\r\n");
      out.write("			notice.style.color = 'hsl(118.43deg 64.18% 38.3%)';\r\n");
      out.write("		}\r\n");
      out.write("	if (cpwd.test(mpwd.value) && mpwd.value === mpwd2.value){\r\n");
      out.write("		submit.hidden = false;\r\n");
      out.write("	}\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("mpwd2.addEventListener('keyup', function() {\r\n");
      out.write("			notice.hidden = false;\r\n");
      out.write("			submit.hidden = true;\r\n");
      out.write("if (mpwd.value === mpwd2.value && cpwd.test(mpwd.value)) {\r\n");
      out.write("	notice.textContent = '사용가능한 패스워드입니다.'; \r\n");
      out.write("	notice.style.color = 'hsl(118.43deg 64.18% 38.3%)';\r\n");
      out.write("} else if (mpwd.value === mpwd2.value){\r\n");
      out.write("	if(!cpwd.test(mpwd.value)){\r\n");
      out.write("			submit.hidden = true;\r\n");
      out.write("	notice.textContent = '패스워드를 올바르게 입력해주세요.';\r\n");
      out.write("			notice.style.color = '#ae1a1e';\r\n");
      out.write("	}\r\n");
      out.write("} else {\r\n");
      out.write("	notice.textContent = '패스워드와 같은 값을 입력해주세요.';\r\n");
      out.write("			notice.style.color = '#ae1a1e';\r\n");
      out.write("}\r\n");
      out.write("if (cpwd.test(mpwd2.value) && mpwd.value === mpwd2.value){\r\n");
      out.write("	submit.hidden = false;\r\n");
      out.write("}\r\n");
      out.write("});	\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("<h1 align=\"left\"><a href=\"/petmily/index.jsp\">Petmily</a></h1>\r\n");
      out.write("</header>\r\n");
      out.write("<h2 align=\"center\">패스워드 변경</h2>\r\n");
      out.write("<form action=\"/petmily/pwdupdate\" method=\"post\">\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr><td><div style=\"width:auto; height:15px; border:2px;\"></div></td></tr>\r\n");
      out.write("		<tr><td><input type=\"text\" id=\"myinformation\" value=\"내 회원정보\" readonly></td></tr>\r\n");
      out.write("		<tr><td name=\"dpinfo\">아이디 : <input type=\"text\" id=\"mid\" name=\"mid\" value=\"");
      out.print( member.getMemberId() );
      out.write("\" readonly></td></tr>\r\n");
      out.write("		<tr><td><input type=\"password\" id=\"mpwd\" name=\"mpwd\" placeholder=\"새로운 패스워드 입력\"required></td></tr>\r\n");
      out.write("		<tr><td><input type=\"password\" id=\"mpwd2\" name=\"mpwd2\" placeholder=\"패스워드 확인\"required></td></tr>\r\n");
      out.write("		<tr><td name=\"dpinfo\">이메일 : <input type=\"text\" id=\"memail\" name=\"memail\" value=\"");
      out.print( member.getMemberEmail() );
      out.write("\" readonly></td></tr>\r\n");
      out.write("		<tr><td name=\"dpinfo\">닉네임 : <input type=\"text\" id=\"mnick\" name=\"mnick\" value=\"");
      out.print( member.getMemberNick() );
      out.write("\" readonly></td></tr>\r\n");
      out.write("		<tr><td><div id=\"checkenroll\">패스워드는 영어 대,소문자와 숫자를 포함하고,!@#$기호중 하나를 포함시켜 6~12글자로 사용해주세요.</div></td></tr>\r\n");
      out.write("		<tr><td><div style=\"width:auto; height:15px; border:2px;\"></div></td></tr>\r\n");
      out.write("		<tr><td><input type=\"submit\" value=\"패스워드 변경\" id=\"chpwd\"></td></tr>\r\n");
      out.write("		<tr><td><div style=\"width:auto; height:15px; border:2px;\"></div></td></tr>\r\n");
      out.write("	</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
